#!/bin/bash
#
# Sourceable template for writing OS-native mktree backends.
# Uses a lightweight snapshot feature from the test-suite for isolation.

source ./mktree.common

OS_VERSION=@OS_VERSION@

OUT_DIR=$PWD/mktree.output
BASE_DIR=$OUT_DIR/base
INST_DIR=$OUT_DIR/inst
SANDBOX_DIR=$PWD/mktree.sandbox
CACHE_DIR=$PWD/mktree.cache
DATA_DIR=$BASE_DIR/usr/share/mktree

ENV_FILE=$DATA_DIR/env.sh
ENV_MOTD="
Welcome to RPM test environment!

This is like an interactive test but with
full host integration.

Your test tree is mounted at \$RPMTEST.
You can use the usual test commands, e.g.

  runroot rpm ...
"

CMD=$1; shift

mount_tree()
{
    source ./atlocal
    RPMTREE=$INST_DIR:$BASE_DIR
    RPMTEST=${1:-$OUT_DIR}/tree
    trap "snapshot umount" EXIT
    snapshot mount $1
}

# Run CMD in a user namespace (if not root already)
if [ $(id -u) != 0 ]; then
    if [ -f /run/.toolboxenv ]; then
        # toolbox(1) support
        UNSHARE="sudo --preserve-env"
    else
        UNSHARE="unshare -r --mount --map-auto"
    fi
    $UNSHARE $0 $CMD "$@"
    exit
fi

case $CMD in
    build)
        rm -rf "$INST_DIR"
        make_install $INST_DIR

        [ -d "$BASE_DIR" ] && exit 0
        mkdir -p $CACHE_DIR $DATA_DIR
        echo "echo '$ENV_MOTD'" > $ENV_FILE

        # OS-specific backend should run here
    ;;
    env)
        set -a
        mount_tree $SANDBOX_DIR
        source $ENV_FILE
        $SHELL
        exit 0
    ;;
    shell)
        mount_tree $SANDBOX_DIR
        snapshot shell "$@"
        exit 0
    ;;
    check)
        mount_tree
        snapshot shell --tmpfs /tmp --chdir /srv ./rpmtests "$@"
        exit
    ;;
    reset)
        rm -rf "$SANDBOX_DIR"
        exit 0
    ;;
esac
