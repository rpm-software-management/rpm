#    rpmdb.at: test rpmdb access
#
#    Copyright (C) 2007  Ralf Cors√©pius <corsepiu@fedoraproject.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

AT_BANNER([RPM database access])

# ------------------------------
# Attempt to initialize a rpmdb
AT_SETUP([rpm --initdb])
AT_KEYWORDS([rpmdb])
RPMTEST_CHECK([
RPMDB_INIT
],
[0],
[ignore],
[ignore])
RPMTEST_CLEANUP

# ------------------------------
# Run rpm -qa on an empty rpmdb
AT_SETUP([rpm -qa 1])
AT_KEYWORDS([rpmdb query])
RPMTEST_CHECK([
RPMDB_INIT
runroot rpm \
  -qa
],
[0])
RPMTEST_CLEANUP

# Run rpm -qa on a non-existent rpmdb
AT_SETUP([rpm -qa 2])
AT_KEYWORDS([rpmdb query])
RPMTEST_CHECK([
RPMTEST_SETUP
rm -rf "${RPMTEST}"`rpm --eval '%_dbpath'`
runroot rpm \
  -qa
],
[0],
[],
[ignore])
RPMTEST_CLEANUP

AT_SETUP([rpm -qa 3])
AT_KEYWORDS([rpmdb query])
RPMTEST_SETUP

RPMTEST_CHECK([
runroot rpm -U --nodeps --ignorearch --ignoreos --nosignature \
	/data/RPMS/foo-1.0-1.noarch.rpm \
	/data/RPMS/hello-2.0-1.x86_64-signed.rpm

# Assert that there are at least 3 packages in the rpmdb (we are using that of
# the test image here so that is pretty much guaranteed).
runroot rpm -qa | wc -l | xargs test 2 -lt || exit 1

runroot rpm -qa foo hello | sort
],
[0],
[foo-1.0-1.noarch
hello-2.0-1.x86_64
],
[])
RPMTEST_CLEANUP

AT_SETUP([rpmdb --export and --import])
AT_KEYWORDS([rpmdb])

# This needs to run *without* RPMDB_INIT to test behavior on read-only mount
RPMTEST_CHECK([
run rpmdb --exportdb --dbpath ${RPMTEST}/data/misc/ > rdonly.list
test -s rdonly.list
],
[0],
[],
[])

RPMTEST_CHECK([
RPMDB_INIT
runroot rpm -U /data/RPMS/hlinktest-1.0-1.noarch.rpm
],
[0],
[],
[])

RPMTEST_CHECK([
# Need to pass the dbpath explicitly since we're not going through run/runroot
runroot_other /sbin/runuser -u nobody -- rpmdb --dbpath /var/lib/rpm --exportdb > hdr.list
],
[0],
[],
[])

RPMTEST_CHECK([
runroot rpm -qa --dbpath ${PWD}
],
[0],
[],
[])

RPMTEST_CHECK([
runroot rpmdb --importdb --dbpath ${PWD} < hdr.list
runroot rpm -qa --dbpath ${PWD}
],
[0],
[hlinktest-1.0-1.noarch
],
[])
RPMTEST_CLEANUP

AT_SETUP([rpm -qa and rpmkeys])
AT_KEYWORDS([rpmdb query])
AT_SKIP_IF([test x$PGP = xdummy])
RPMDB_INIT

# root's .rpmmacros used to keep this build prefix independent
echo "%_keyring rpmdb" >> "${RPMTEST}"/root/.rpmmacros

RPMTEST_CHECK([
runroot rpm -U --nodeps --ignorearch --ignoreos --nosignature \
	/data/RPMS/foo-1.0-1.noarch.rpm \
	/data/RPMS/hello-2.0-1.x86_64-signed.rpm
runroot rpm -qa | sort
],
[0],
[foo-1.0-1.noarch
hello-2.0-1.x86_64
],
[])

RPMTEST_CHECK([
runroot rpmkeys --import /data/keys/rpm.org-rsa-2048-test.pub
runroot rpmkeys --import /data/keys/alice.asc
runroot rpmkeys --import /data/keys/rpm.org-ed25519-test.pub
runroot rpm -qa | sort
],
[0],
[foo-1.0-1.noarch
gpg-pubkey-152bb32fd9ca982797e835cfb0645aec757bf69e-661d22a8
gpg-pubkey-771b18d3d7baa28734333c424344591e1964c5fc-58e63918
gpg-pubkey-b6542f92f30650c36b6f41bcb3a771bfeb04e625-62521e00
hello-2.0-1.x86_64
],
[])

RPMTEST_CHECK([
runroot rpmkeys --list
],
[0],
[771b18d3d7baa28734333c424344591e1964c5fc rpm.org RSA testkey <rsa@rpm.org> public key
152bb32fd9ca982797e835cfb0645aec757bf69e rpm.org ed25519 testkey <ed25519@rpm.org> public key
b6542f92f30650c36b6f41bcb3a771bfeb04e625 Alice <alice@example.org> public key
],
[])

RPMTEST_CHECK([
runroot rpmkeys --export
],
[0],
[-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBFjmORgBCAC7TMEk6wnjSs8Dr4yqSScWdU2pjcqrkTxuzdWvowcIUPZI0w/g
HkRqGd4apjvY2V15kjL10gk3QhFP3pZ/9p7zh8o8NHX7aGdSGDK7NOq1eFaErPRY
91LW9RiZ0lbOjXEzIL0KHxUiTQEmdXJT43DJMFPyW9fkCWg0OltiX618FUdWWfI8
eySdLur1utnqBvdEbCUvWK2RX3vQZQdvEBODnNk2pxqTyV0w6VPQ96W++lF/5Aas
7rUv3HIyIXxIggc8FRrnH+y9XvvHDonhTIlGnYZN4ubm9i4y3gOkrZlGTrEw7elQ
1QeMyG2QQEbze8YjpTm4iLABCBrRfPRaQpwrABEBAAG0IXJwbS5vcmcgUlNBIHRl
c3RrZXkgPHJzYUBycG0ub3JnPokBNwQTAQgAIQUCWOY5GAIbAwULCQgHAgYVCAkK
CwIEFgIDAQIeAQIXgAAKCRBDRFkeGWTF/MxxCACnjqFL+MmPh9W9JQKT2DcLbBzf
Cqo6wcEBoCOcwgRSk8dSikhARoteoa55JRJhuMyeKhhEAogE9HRmCPFdjezFTwgB
BDVBpO2dZ023mLXDVCYX3S8pShOgCP6Tn4wqCnYeAdLcGg106N4xcmgtcssJE+Pr
XzTZksbZsrTVEmL/Ym+R5w5jBfFnGk7Yw7ndwfQsfNXQb5AZynClFxnX546lcyZX
fEx3/e6ezw57WNOUK6WT+8b+EGovPkbetK/rGxNXuWaP6X4A/QUm8O98nCuHYFQq
+mvNdsCBqGf7mhaRGtpHk/JgCn5rFvArMDqLVrR9hX0LdCSsH7EGE+bR3r7wuQEN
BFjmORgBCACk+vDZrIXQuFXEYToZVwb2attzbbJJCqD71vmZTLsW0QxuPKRgbcYY
zp4K4lVBnHhFrF8MOUOxJ7kQWIJZMZFt+BDcptCYurbD2H4W2xvnWViiC+LzCMzz
iMJT6165uefL4JHTDPxC2fFiM9yrc72LmylJNkM/vepT128J5Qv0gRUaQbHiQuS6
Dm/+WRnUfx3i89SV4mnBxb/Ta93GVqoOciWwzWSnwEnWYAvOb95JL4U7c5J5f/+c
KnQDHsW7sIiIdscsWzvgf6qs2Ra1Zrt7Fdk4+ZS2f/adagLhDO1C24sXf5XfMk5m
L0OGwZSr9m5s17VXxfspgU5ugc8kBJfzABEBAAGJAR8EGAEIAAkFAljmORgCGwwA
CgkQQ0RZHhlkxfzwDQf/Y5on5o+s/xD3tDyRYa6SErfT44lEArdCD7Yi+cygJFox
3jyM8ovtJAkwRegwyxcaLN7zeG1p1Sk9ZAYWQEJT6qSU4Ppu+CVGHgxgnTcfUiu6
EZZQE6srvua53IMY1lT50M7vx0T5VicHFRWBFV2C/Mc32p7cEE6nn45nEZgUXQNl
ySEyvoRlsAJq6gFsfqucVz2vMJDTMVczUtq1CjvUqFbif8JVL36EoZCf1SeRw6d6
s1Kp3AA33Rjd+Uw87HJ4EIB75zMFQX2H0ggAVdYTQcqGXHP5MZK1jJrHfxJyMi3d
UNW2iqnN3BA7guhOv6OMiROF1+I7Q5nWT63mQC7IgQ==
=Z6nu
-----END PGP PUBLIC KEY BLOCK-----
-----BEGIN PGP PUBLIC KEY BLOCK-----

mDMEZh0iqBYJKwYBBAHaRw8BAQdAykdH/PFqlgMlJjKORrUVBCEtMj6dPAHev1Qr
DwxCr5u0KXJwbS5vcmcgZWQyNTUxOSB0ZXN0a2V5IDxlZDI1NTE5QHJwbS5vcmc+
iJAEExYIADgWIQQVK7Mv2cqYJ5foNc+wZFrsdXv2ngUCZh0iqAIbAwULCQgHAgYV
CgkICwIEFgIDAQIeAQIXgAAKCRCwZFrsdXv2nkd7AP42YzwyWeKd/775qIJ1qPai
dy/F5VaN3Y5W5rw0KwvPLgD9F3Pna3krtD/9MtkfsI9pitS8g598YlknklAHPi5p
FwY=
=sZKd
-----END PGP PUBLIC KEY BLOCK-----
-----BEGIN PGP PUBLIC KEY BLOCK-----

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
BlgjNTm30U4AGjWmvl24U6a1o8/m
=Qf3c
-----END PGP PUBLIC KEY BLOCK-----
],
[])

RPMTEST_CHECK([
runroot rpmkeys --list 771b18d3d7baa28734333c424344591e1964c5fc
],
[0],
[771b18d3d7baa28734333c424344591e1964c5fc rpm.org RSA testkey <rsa@rpm.org> public key
],
[])

RPMTEST_CHECK([
runroot rpmkeys --list 4344591e1964c5fc
],
[0],
[771b18d3d7baa28734333c424344591e1964c5fc rpm.org RSA testkey <rsa@rpm.org> public key
],
[])

RPMTEST_CHECK([
runroot rpmkeys -x 4344591e1964c5fc
],
[0],
[-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBFjmORgBCAC7TMEk6wnjSs8Dr4yqSScWdU2pjcqrkTxuzdWvowcIUPZI0w/g
HkRqGd4apjvY2V15kjL10gk3QhFP3pZ/9p7zh8o8NHX7aGdSGDK7NOq1eFaErPRY
91LW9RiZ0lbOjXEzIL0KHxUiTQEmdXJT43DJMFPyW9fkCWg0OltiX618FUdWWfI8
eySdLur1utnqBvdEbCUvWK2RX3vQZQdvEBODnNk2pxqTyV0w6VPQ96W++lF/5Aas
7rUv3HIyIXxIggc8FRrnH+y9XvvHDonhTIlGnYZN4ubm9i4y3gOkrZlGTrEw7elQ
1QeMyG2QQEbze8YjpTm4iLABCBrRfPRaQpwrABEBAAG0IXJwbS5vcmcgUlNBIHRl
c3RrZXkgPHJzYUBycG0ub3JnPokBNwQTAQgAIQUCWOY5GAIbAwULCQgHAgYVCAkK
CwIEFgIDAQIeAQIXgAAKCRBDRFkeGWTF/MxxCACnjqFL+MmPh9W9JQKT2DcLbBzf
Cqo6wcEBoCOcwgRSk8dSikhARoteoa55JRJhuMyeKhhEAogE9HRmCPFdjezFTwgB
BDVBpO2dZ023mLXDVCYX3S8pShOgCP6Tn4wqCnYeAdLcGg106N4xcmgtcssJE+Pr
XzTZksbZsrTVEmL/Ym+R5w5jBfFnGk7Yw7ndwfQsfNXQb5AZynClFxnX546lcyZX
fEx3/e6ezw57WNOUK6WT+8b+EGovPkbetK/rGxNXuWaP6X4A/QUm8O98nCuHYFQq
+mvNdsCBqGf7mhaRGtpHk/JgCn5rFvArMDqLVrR9hX0LdCSsH7EGE+bR3r7wuQEN
BFjmORgBCACk+vDZrIXQuFXEYToZVwb2attzbbJJCqD71vmZTLsW0QxuPKRgbcYY
zp4K4lVBnHhFrF8MOUOxJ7kQWIJZMZFt+BDcptCYurbD2H4W2xvnWViiC+LzCMzz
iMJT6165uefL4JHTDPxC2fFiM9yrc72LmylJNkM/vepT128J5Qv0gRUaQbHiQuS6
Dm/+WRnUfx3i89SV4mnBxb/Ta93GVqoOciWwzWSnwEnWYAvOb95JL4U7c5J5f/+c
KnQDHsW7sIiIdscsWzvgf6qs2Ra1Zrt7Fdk4+ZS2f/adagLhDO1C24sXf5XfMk5m
L0OGwZSr9m5s17VXxfspgU5ugc8kBJfzABEBAAGJAR8EGAEIAAkFAljmORgCGwwA
CgkQQ0RZHhlkxfzwDQf/Y5on5o+s/xD3tDyRYa6SErfT44lEArdCD7Yi+cygJFox
3jyM8ovtJAkwRegwyxcaLN7zeG1p1Sk9ZAYWQEJT6qSU4Ppu+CVGHgxgnTcfUiu6
EZZQE6srvua53IMY1lT50M7vx0T5VicHFRWBFV2C/Mc32p7cEE6nn45nEZgUXQNl
ySEyvoRlsAJq6gFsfqucVz2vMJDTMVczUtq1CjvUqFbif8JVL36EoZCf1SeRw6d6
s1Kp3AA33Rjd+Uw87HJ4EIB75zMFQX2H0ggAVdYTQcqGXHP5MZK1jJrHfxJyMi3d
UNW2iqnN3BA7guhOv6OMiROF1+I7Q5nWT63mQC7IgQ==
=Z6nu
-----END PGP PUBLIC KEY BLOCK-----
],
[])


RPMTEST_CHECK([
runroot rpmkeys --list XXX
],
[1],
[],
[error: invalid key id: XXX
])

RPMTEST_CHECK([
runroot rpmkeys --delete 1964c5fc
runroot rpmkeys --delete 757bf69e
runroot rpmkeys --delete eb04e625
runroot rpmkeys --list
],
[0],
[],
[])
RPMTEST_CLEANUP

# ------------------------------
# Run rpm -q <package> where <package> exists in the db.
AT_SETUP([rpm -q foo])
AT_KEYWORDS([rpmdb query])
RPMTEST_CHECK([
RPMDB_INIT

runroot rpm -i \
  /data/RPMS/foo-1.0-1.noarch.rpm

runroot rpm -q foo

],
[0],
[foo-1.0-1.noarch
],
[])
RPMTEST_CLEANUP

# ------------------------------
# Run rpm -q <package>- where <package> exists in the db.
AT_SETUP([rpm -q foo-])
AT_KEYWORDS([rpmdb query])
RPMTEST_CHECK([
RPMDB_INIT

runroot rpm -i \
  /data/RPMS/foo-1.0-1.noarch.rpm

runroot rpm -q foo-

],
[1],
[package foo- is not installed
],
[])
RPMTEST_CLEANUP

AT_SETUP([rpmdb header numbering])
AT_KEYWORDS([rpmdb])
RPMTEST_CHECK([
RPMDB_INIT

for i in 1 2 3; do
    runroot rpm -i /data/RPMS/foo-1.0-1.noarch.rpm
    runroot rpm -q --qf "%{dbinstance} %{name}\n" foo
    runroot rpm -e foo
done

],
[0],
[1 foo
2 foo
3 foo
],
[])
RPMTEST_CLEANUP

AT_SETUP([rpm -q --querybynumber])
AT_KEYWORDS([rpmdb query])
RPMTEST_CHECK([
RPMDB_INIT

runroot rpm -i \
  /data/RPMS/foo-1.0-1.noarch.rpm

],
[0],
[],
[])

RPMTEST_CHECK([
runroot rpm -q --querybynumber 1
],
[0],
[foo-1.0-1.noarch
],
[])

RPMTEST_CHECK([
runroot rpm -q --querybynumber 999
],
[1],
[],
[error: record 999 could not be read
])
RPMTEST_CLEANUP

# ------------------------------
# install a noarch package into a local rpmdb without --relocate and --nodeps
# * Should always succeed
AT_SETUP([rpm -i *.noarch.rpm])
AT_KEYWORDS([rpmdb install])

RPMTEST_CHECK([
RPMDB_INIT

runroot rpm -i \
  /data/RPMS/foo-1.0-1.noarch.rpm
],
[0])

RPMTEST_CLEANUP

# ------------------------------
# reinstall a noarch package (with no files)
AT_SETUP([rpm -U --replacepkgs 1])
AT_KEYWORDS([rpmdb install])

RPMTEST_CHECK([
RPMDB_INIT

tpkg="/data/RPMS/foo-1.0-1.noarch.rpm"

runroot rpm -i "${tpkg}" && 
  runroot rpm -U --replacepkgs "${tpkg}" &&
  runroot rpm -qa
],
[0],
[foo-1.0-1.noarch
],
[])

RPMTEST_CLEANUP

# ------------------------------
# reinstall a package with different file policies
AT_SETUP([rpm -U --replacepkgs 2])
AT_KEYWORDS([rpmdb install])

RPMTEST_CHECK([
RPMDB_INIT

tpkg="/data/RPMS/hello-2.0-1.i686.rpm"

runroot rpm -U --nodeps --ignorearch "${tpkg}" && 
  runroot rpm -U --nodeps --ignorearch --nodocs --replacepkgs "${tpkg}" &&
  runroot rpm -e hello
test -d "${RPMTEST}"/usr/share/doc/hello-2.0
],
[1],
[],
[])
RPMTEST_CLEANUP

# ------------------------------
# reinstall a package with different file policies
AT_SETUP([rpm --reinstall 1])
AT_KEYWORDS([rpmdb install])

RPMTEST_CHECK([
RPMDB_INIT

tpkg="/data/RPMS/hello-2.0-1.i686.rpm"

runroot rpm -U --nodeps --ignorearch "${tpkg}" && 
  runroot rpm --reinstall --nodeps --ignorearch --nodocs "${tpkg}" &&
  runroot rpm -e hello
test -d "${RPMTEST}"/usr/share/doc/hello-2.0
],
[1],
[],
[])
RPMTEST_CLEANUP

# ------------------------------
# install a package into a local rpmdb
# * Shall only work with if one is relocated
# * Use --ignorearch because we don't know the arch
AT_SETUP([rpm -i --relocate=.. *.i386.rpm])
AT_KEYWORDS([rpmdb install])
RPMDB_INIT

RPMTEST_CHECK([
runroot rpm -i \
  --noscripts --nodeps --ignorearch --noverify \
  /data/RPMS/hello-1.0-1.i386.rpm
],
[0])

RPMTEST_CHECK([
runroot rpm -i \
  --noscripts --nodeps --ignorearch --noverify \
  /data/RPMS/hello-1.0-1.ppc64.rpm
],
[1],
[],
[	file /usr/local/bin/hello from install of hello-1.0-1.ppc64 conflicts with file from package hello-1.0-1.i386
])

RPMTEST_CHECK([
runroot rpm -i \
  --noscripts --nodeps --ignorearch --noverify --relocate=/usr=/check \
  /data/RPMS/hello-1.0-1.ppc64.rpm
],
[0])

RPMTEST_CHECK([
runroot rpm -ql hello.i386 hello.ppc64
],
[0],
[/usr/local/bin/hello
/usr/share/doc/hello-1.0
/usr/share/doc/hello-1.0/FAQ
/check/local/bin/hello
/check/share/doc/hello-1.0
/check/share/doc/hello-1.0/FAQ
])
RPMTEST_CLEANUP

AT_SETUP([rpmdb --rebuilddb])
AT_KEYWORDS([rpmdb])
RPMTEST_CHECK([
RPMDB_INIT

runroot rpm -U --noscripts --nodeps --ignorearch --noverify \
  /data/RPMS/hello-1.0-1.i386.rpm
runroot rpm -qa --qf "%{nevra} %{dbinstance}\n"
runroot rpm -U --noscripts --nodeps --ignorearch \
  /data/RPMS/hello-2.0-1.i686.rpm
runroot rpm -qa --qf "%{nevra} %{dbinstance}\n"
runroot rpmdb --rebuilddb
runroot rpm -qa --qf "%{nevra} %{dbinstance}\n"
],
[],
[hello-1.0-1.i386 1
hello-2.0-1.i686 2
hello-2.0-1.i686 1
],
[])
RPMTEST_CLEANUP

# ------------------------------
# Attempt to initialize, rebuild and verify a db
AT_SETUP([rpmdb --rebuilddb and verify empty database])
AT_KEYWORDS([rpmdb])
RPMTEST_CHECK([
RPMDB_INIT
runroot rpmdb --rebuilddb
runroot rpmdb --verifydb
],
[0],
[],
[])
RPMTEST_CLEANUP

# ------------------------------
# Install and verify status
AT_SETUP([rpm -U and verify status])
AT_KEYWORDS([install rpmdb query])
RPMTEST_CHECK([
RPMDB_INIT

runroot rpmbuild --quiet -bb \
        --define "pkg status" \
	--define "filedata same_stuff" \
          /data/SPECS/conflicttest.spec

runroot rpm -U /build/RPMS/noarch/conflictstatus-1.0-1.noarch.rpm
runroot rpm -qls conflictstatus
],
[0],
[normal        /usr/share/my.version
],
[])
RPMTEST_CLEANUP

# ------------------------------
# Install and verify status
AT_SETUP([rpm -U with _install_lang and verify status])
AT_KEYWORDS([install rpmdb query])
RPMTEST_CHECK([
RPMDB_INIT

runroot rpmbuild --quiet -bb \
          /data/SPECS/flangtest.spec

runroot rpm -U --define "_install_langs de:fi" /build/RPMS/noarch/flangtest-1.0-1.noarch.rpm
runroot rpm -qls flangtest
],
[0],
[normal        /usr/share/flangtest/de.txt
normal        /usr/share/flangtest/empty.txt
not installed /usr/share/flangtest/en.txt
normal        /usr/share/flangtest/fi.txt
normal        /usr/share/flangtest/none.txt
not installed /usr/share/flangtest/pl.txt
],
[])
RPMTEST_CLEANUP

# ------------------------------
AT_SETUP([rpmdb query special chars])
AT_KEYWORDS([install rpmdb query])
RPMDB_INIT
for v in "1.0+2" "1.0^2" "1.0~2"; do
    runroot rpmbuild --quiet -bb \
        --define "ver $v" \
          /data/SPECS/versiontest.spec
done

RPMTEST_CHECK([
RPMDB_INIT
runroot rpm -U '/build/RPMS/noarch/versiontest-1.0+2-1.noarch.rpm'
runroot rpm -q 'versiontest-1.0+2-1'
],
[0],
[versiontest-1.0+2-1.noarch
],
[])

RPMTEST_CHECK([
RPMDB_INIT
runroot rpm -U '/build/RPMS/noarch/versiontest-1.0^2-1.noarch.rpm'
runroot rpm -q 'versiontest-1.0^2-1'
],
[0],
[versiontest-1.0^2-1.noarch
],
[])

RPMTEST_CHECK([
RPMDB_INIT
runroot rpm -U '/build/RPMS/noarch/versiontest-1.0~2-1.noarch.rpm'
runroot rpm -q 'versiontest-1.0~2-1'
],
[0],
[versiontest-1.0~2-1.noarch
],
[])

RPMTEST_CLEANUP
